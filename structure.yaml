src:
  structure.yaml:
    content: |-
      Modern Full-Stack Development Template
      
      環境設定:
      - Volta によるツールチェーン管理
        - Node.js v20.x (LTS)
        - pnpm v8.x
      - Next.js + Supabase による高速開発環境
      - 型安全性重視の設計
      - スケーラブルなアーキテクチャ
      
      主要機能:
      - フルスタック TypeScript
      - データベース自動マイグレーション
      - エンドツーエンドの型安全性
      - モダンUI/UXデザイン
      - 状態管理（Zustand）
      
      開発効率化戦略:
      - スキーマ駆動開発
      - 型推論による安全性
      - コード自動生成
      - 再利用可能コンポーネント
      - グローバル状態の一元管理
      - pnpmによる高速な依存関係管理

      ディレクトリ構成:
      ├── .github/              # GitHub設定
      │   └── workflows/        # GitHub Actions
      │
      ├── app/                  # Next.js アプリケーションルート
      │   ├── (auth)/          # 認証関連ページ
      │   ├── (dashboard)/     # ダッシュボード関連ページ
      │   ├── api/             # APIルート
      │   └── layout.tsx       # ルートレイアウト
      │
      ├── components/          # コンポーネント
      │   ├── ui/             # 再利用可能なUIコンポーネント
      │   ├── forms/          # フォームコンポーネント
      │   └── layouts/        # レイアウトコンポーネント
      │
      ├── lib/                # ユーティリティ
      │   ├── utils/          # 汎用ユーティリティ
      │   ├── hooks/          # カスタムフック
      │   └── types/          # 型定義
      │
      ├── stores/             # Zustandストア
      │   ├── auth.ts        # 認証状態
      │   └── ui.ts          # UI状態
      │
      ├── styles/             # スタイル定義
      │   └── globals.css    # グローバルスタイル
      │
      ├── prisma/            # Prisma設定
      │   ├── schema.prisma  # データベーススキーマ
      │   └── migrations/    # マイグレーションファイル
      │
      ├── config/            # 設定ファイル
      │   ├── env.ts         # 環境変数
      │   └── site.ts       # サイト全般の設定
      │
      ├── public/           # 静的ファイル
      │   ├── images/      # 画像ファイル
      │   └── fonts/       # フォントファイル
      │
      ├── .env             # 環境変数
      ├── .env.local       # ローカル環境変数
      ├── .env.development # 開発環境変数
      ├── .env.production  # 本番環境変数
      ├── .eslintrc.json  # ESLint設定
      ├── .prettierrc     # Prettier設定
      ├── .gitignore      # Git除外設定
      ├── package.json    # プロジェクト設定
      ├── pnpm-lock.yaml  # 依存関係ロック
      ├── tsconfig.json   # TypeScript設定
      └── tailwind.config.ts # Tailwind設定

  app-template:
    next-app:
      content: |-
        Next.js 14+ アプリケーション構成
        - App Router
        - Server Components
        - TypeScript
        - Tailwind CSS
        - Shadcn UI
        - Zustand
        
        機能:
        - ルーティング
        - レイアウトシステム
        - サーバーアクション
        - クライアントコンポーネント
        - 状態管理
      dependency: []
    database:
      prisma-schema:
        content: |-
          Prisma スキーマ定義
          - Supabase PostgreSQL 連携
          - リレーション定義
          - マイグレーション管理
          - シード機能
        dependency: []
    validation:
      zod-schemas:
        content: |-
          Zod バリデーションスキーマ
          - API入力検証
          - フォームバリデーション
          - 型推論連携
          - カスタムバリデーション
        dependency: []
  utils:
    supabase:
      client.ts:
        content: |-
          Supabase クライアント設定
          - 認証管理
          - リアルタイム購読
          - ストレージ操作
          - RLS設定
        dependency: []
    hooks:
      content: |-
        カスタムフック
        - データフェッチング
        - 認証状態管理
        - フォーム処理
        - UI状態管理
      dependency: []
      
      

  components:
    ui:
      content: |-
        UI コンポーネント
        - Tailwind + Shadcn UI
        - レスポンシブデザイン
        - アニメーション
        - テーマ設定
      dependency: []
      
      

    forms:
      content: |-
        フォームコンポーネント
        - React Hook Form 統合
        - Zod バリデーション
        - エラーハンドリング
        - 動的フォーム
      dependency: []
      
      

  config:
    env:
      content: |-
        環境変数設定
        - Supabase 接続情報
        - API キー
        - 環境別設定
      dependency: []
      
      

    tailwind:
      content: |-
        Tailwind 設定
        - カスタムテーマ
        - プラグイン設定
        - ユーティリティ拡張
      dependency: []
      
      

    node:
      content: |-
        Node.js 環境設定
        - volta.json (Node.js, pnpm バージョン管理)
          - プロジェクト固有のバージョン指定
          - チーム間での一貫した環境
        - .npmrc (pnpm設定)
        - package.json
        
        pnpm workspace設定:
        - 依存関係の共有
        - モノレポ対応
        - ロックファイル管理
        - キャッシュ最適化
      dependency: []
    scripts:
      content: |-
        pnpmスクリプト定義
        - 開発環境起動
        - ビルド
        - テスト
        - リント
        - フォーマット
        - マイグレーション
        - シード
      dependency: []
  stores:
    content: |-
      Zustand ストア定義
      - アプリケーション状態
      - 永続化設定
      - ミドルウェア
      - デバッグツール連携
    dependency: []
    
    
